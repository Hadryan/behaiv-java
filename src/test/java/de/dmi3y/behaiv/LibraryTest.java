/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package de.dmi3y.behaiv;

import de.dmi3y.behaiv.kernel.KernelTest;
import de.dmi3y.behaiv.provider.TestSleepProvider;
import de.dmi3y.behaiv.tools.Pair;
import io.reactivex.rxjava3.core.Observable;
import org.junit.Before;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static de.dmi3y.behaiv.kernel.KernelTest.WORK;
import static org.junit.Assert.assertEquals;

public class LibraryTest {
    Behaiv behaiv;
    private TestSleepProvider positionProvider;
    private TestSleepProvider timeProvider;
    private List<Pair<List<Double>, String>> data;

    public static final String WORK_SCREEN = "WORK_SCREEN";

    @Before
    public void setUp() throws Exception {
        behaiv = Behaiv.with("testId");
        positionProvider = new TestSleepProvider(new String[]{"latitude", "longitude"}, new Double[]{10.10, 10.10}, 150);
        timeProvider = new TestSleepProvider(new String[]{"time"}, new Double[]{9.0 * 60 + 30.0}, 200);
        behaiv.setProvider(positionProvider);
        behaiv.setProvider(timeProvider);
        data = KernelTest.getTrainingData();
    }

    @Test
    public void behaivTest_basicTestFlow_predictsJob() throws Exception {
        for (Pair<List<Double>, String> fToL : data) {
            List<Double> features = fToL.getKey();
            timeProvider.next(new Double[]{features.get(0)});
            positionProvider.next(new Double[]{features.get(1), features.get(2)});
            capture(fToL.getValue());
        }

        Observable<String> register = behaiv.subscribe();
        timeProvider.next(new Double[]{(11 * 60 + 30.0) / (24 * 60)});
        positionProvider.next(new Double[]{WORK[0], WORK[1]});
        behaiv.startCapturing(true);
        String predictionResult = register.blockingFirst();
        assertEquals(WORK_SCREEN, predictionResult);

    }

    public void capture(String screenName) throws InterruptedException {
        new Thread(new Runnable()
        {
            @Override
            public void run()
            {
                behaiv.startCapturing(false);
            }
        }).start();
        Thread.sleep(340); // This value should be less than sum of latencies to verify that it's parallel
        behaiv.registerLabel(screenName);
        behaiv.stopCapturing(false);
    }

}
